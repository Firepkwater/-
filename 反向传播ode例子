import numpy as np
import matplotlib.pyplot as plt
def sigmoid(x):
    return 1 / (np.exp(-x)+1)
def sigmoidGradient(x):
    return sigmoid(x)*(1-sigmoid(x))
def sigmoidsecGradient(x):
    return (2*np.exp(-x) - np.exp(-x)*(1+np.exp(-x)))/(1+np.exp(-x))**3

x = np.random.rand(1)
w = np.random.rand(1)#初始化权重
b1 = np.ones(1)#初始化偏置
v = np.random.rand(1)
alpha = 0.98#学习率
def bp(w,b1,v):
    #1 正向传播求损失
    h1 = sigmoid(w*x + b1)
    o1 = 1 + x*v*h1
    #dif_x = v*h1 + x*v*h1*(1-h1)*w
    e = np.square(o1 - 2*x -1) / 2.0

    #2 反向传播更新权重w，偏置b1,v
    t1 = o1 - (1 + 2*x)

    v = v - alpha*t1*x*h1
    w = w - alpha*t1*x*v*h1*(1-h1)*x
    b1 = b1 - alpha*t1*x*v*h1*(1-h1)

    return v,w,b1,o1,e

for i in range(1001):
    v, w, b1, o1, e = bp(w, b1 ,v)
    print('第{}次迭代：预测值:{},总误差:{},权重系数:({},{},{})'.format(i,o1,e,w,v,b1))

fig = plt.figure()
x = np.linspace(0, 1, 10)
y1 = 1 + x*v* sigmoid(w*x + b1)
y2 = 1 + 2 * x
plt.ylim(0, 4)
l1, = plt.plot(x, y1, color='red', linewidth='2.0', linestyle='-')
l2, = plt.plot(x, y2, color='blue', linewidth='1.0', linestyle='--')
plt.legend(handles=[l1, l2], labels=['(a)', '(b)'], loc='best')
plt.show()
