from sympy import *
import  sympy as sym
from sympy import symbols, diff
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
'''
对\[{\nabla ^2}f = 2x + 2y\]进行求解，解为x**2 + y**2 - 1
边界条件为f(0,y)=y**2-1
f(1,y)=y**2
f(x,0)=x**2-1
f(x,1)=x**2
论文中神经网络的解形式为f = A(x,y) +  x*(1-x)*y*(1-y)*sigmoid(w1*x + w2*y + u )*v
'''
def sigmoid(x):
    return 1 / (exp(-x)+1)

def A(x,y):
    return (1-x)*(y**2-1) + x*y**2 + (x**2-x)

def loss(x,y,w1,w2,u,v):
    f = A(x,y) + x*(1-x)*y*(1-y)*sigmoid(w1*x + w2*y + u )*v
    diff_x_2 = diff(f, x,2)
    diff_y_2 = diff(f, y, 2)
    return 0.5*(diff_x_2 + diff_y_2 - (2*x + 2*y))**2

x_in=np.linspace(0,1,3)
y_in=np.linspace(0,1,3)


w0_in = np.random.rand(1)
w1_in = np.random.rand(1)
v0 = np.random.rand(1)
u0 = np.ones(1)
loss_rate = 1
alpha = 0.01


grad_w1 = np.zeros([3,3])
grad_w2 = np.zeros([3,3])
grad_u = np.zeros([3,3])
grad_v = np.zeros([3,3])

x, y, w1, w2, u, v = symbols('x y w1 w2 u v', real=True)


num = 1   #num表示迭代次数
while loss_rate > 1.0e-9 :
    loss_rate = 0
    err1sum_w1 = 0
    err1sum_w2 = 0
    err1sum_u = 0
    err1sum_v = 0
    for i in range(3):
        for j in range(3):
            
            grad_w1[i][j] = diff(loss(x,y,w1,w2,u,v),w1).subs({x:x_in[i],y:y_in[j],w1:w0_in,w2:w1_in,u:u0,v:v0})
            err1sum_w1 = err1sum_w1 + np.sum(grad_w1)

            grad_w2[i][j] = diff(loss(x,y,w1,w2,u,v),w2).subs({x:x_in[i],y:y_in[j],w1:w0_in,w2:w1_in,u:u0,v:v0})
            err1sum_w2 = err1sum_w2 + np.sum(grad_w2)

            grad_u[i][j] = diff(loss(x,y,w1,w2,u,v),u).subs({x:x_in[i],y:y_in[j],w1:w0_in,w2:w1_in,u:u0,v:v0})
            err1sum_u = err1sum_u + np.sum(grad_u)

            grad_v[i][j] = diff(loss(x,y,w1,w2,u,v),v).subs({x:x_in[i],y:y_in[j],w1:w0_in,w2:w1_in,u:u0,v:v0})
            err1sum_v = err1sum_v + np.sum(grad_v)

    w0_in = w0_in - alpha * err1sum_w1
    w1_in = w1_in - alpha * err1sum_w2
    u0 = u0 - alpha * err1sum_u
    v0 = v0 - alpha * err1sum_v
    
    error =np.zeros([len(x_in),len(y_in)])
    for i, x1 in enumerate(x_in):
        for j, y1 in enumerate(y_in):
            func = loss(x,y,w1,w2,u,v)
            error[i][j] =func.evalf(subs={x:x1, y:y1, w1:w0_in, w2:w0_in, u:u0, v:v0})
            loss_rate = loss_rate + np.sum(error)
    
    print("第{}次迭代的损失值为{}".format(num, loss_rate))
    num = num+1

print("loss:",loss_rate)
print("w1:", w0_in,"w2:",w1_in,"u0:",u0,"v0:",v0)


fig = plt.figure()
ax = fig.gca(projection='3d')

# Make data.
X = np.arange(0, 1, 0.25)
Y = np.arange(0, 1, 0.25)
X, Y = np.meshgrid(X, Y)
z1 = w0_in*X + w1_in*Y + u0
t1 = 1/(1 + np.exp(-z1))
R = (1-X)*(Y**2-1) + X*Y**2 + (X**2-X)+ X*(1-X)*Y*(1-Y)*v0*t1 - (X**2 + Y**2 -1)
Z = R

# Plot the surface.
surf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)

# Add a color bar which maps values to colors.
fig.colorbar(surf, shrink=0.5, aspect=5)
plt.xlabel('x')
plt.ylabel('y')
plt.title('loss')
plt.show()



